
beep_beep_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800034c  08000354  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800034c  0800034c  00010354  2**0
                  CONTENTS
  4 .ARM          00000000  0800034c  0800034c  00010354  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800034c  08000354  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000354  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000354  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010354  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010384  2**0
                  CONTENTS, READONLY
 13 .debug_info   000004a8  00000000  00000000  000103c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000121  00000000  00000000  0001086f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000040  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dd3a  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b54  00000000  00000000  0001e772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f770  00000000  00000000  0001f2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000088  00000000  00000000  0006ea38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0006eac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000334 	.word	0x08000334

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000334 	.word	0x08000334

080001d8 <gpioa_init>:
– Write CCxP = 0 to select active high polarity
– Write CCxE = 1 to enable the output
5. Enable the counter by setting the CEN bit in the TIMx_CR1 register*/

void gpioa_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	// Enable clock access to GPIOD
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b28      	ldr	r3, [pc, #160]	; (8000280 <gpioa_init+0xa8>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a27      	ldr	r2, [pc, #156]	; (8000280 <gpioa_init+0xa8>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	// Enable clock access to TIM3
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80001e8:	4b25      	ldr	r3, [pc, #148]	; (8000280 <gpioa_init+0xa8>)
 80001ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001ec:	4a24      	ldr	r2, [pc, #144]	; (8000280 <gpioa_init+0xa8>)
 80001ee:	f043 0302 	orr.w	r3, r3, #2
 80001f2:	6413      	str	r3, [r2, #64]	; 0x40

	// Set PC7 as output pin TIM3_CH2
	GPIOD->MODER |= (1U<<15);
 80001f4:	4b23      	ldr	r3, [pc, #140]	; (8000284 <gpioa_init+0xac>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a22      	ldr	r2, [pc, #136]	; (8000284 <gpioa_init+0xac>)
 80001fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001fe:	6013      	str	r3, [r2, #0]

	// Enable AFR low bits
	GPIOD->AFR[0] |= AFRH7_29;
 8000200:	4b20      	ldr	r3, [pc, #128]	; (8000284 <gpioa_init+0xac>)
 8000202:	6a1b      	ldr	r3, [r3, #32]
 8000204:	4a1f      	ldr	r2, [pc, #124]	; (8000284 <gpioa_init+0xac>)
 8000206:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800020a:	6213      	str	r3, [r2, #32]
	//OR GPIO_AFRH_AFSEL15_1

	// Write to CCMR2, clear
//	1. Select the counter clock (internal, external, prescaler).
	// WANT A 00 FOR OUTPUT CONFIG
	TIM3->CCMR2 &=~ TIM_CCMR2_CC3S;
 800020c:	4b1e      	ldr	r3, [pc, #120]	; (8000288 <gpioa_init+0xb0>)
 800020e:	69db      	ldr	r3, [r3, #28]
 8000210:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <gpioa_init+0xb0>)
 8000212:	f023 0303 	bic.w	r3, r3, #3
 8000216:	61d3      	str	r3, [r2, #28]

	// Select the polarity by writing the CCxP bit in CCER
	// starts high or low?
	// sET clock
	TIM3->CCER &=~ TIM_CCER_CC3P;
 8000218:	4b1b      	ldr	r3, [pc, #108]	; (8000288 <gpioa_init+0xb0>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a1a      	ldr	r2, [pc, #104]	; (8000288 <gpioa_init+0xb0>)
 800021e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000222:	6213      	str	r3, [r2, #32]

	// Select the PWM mode
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_0 | TIM_CCMR2_OC3M_1;
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <gpioa_init+0xb0>)
 8000226:	69db      	ldr	r3, [r3, #28]
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <gpioa_init+0xb0>)
 800022a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800022e:	61d3      	str	r3, [r2, #28]

	// Program period ARR
	TIM3->PSC = 15999;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <gpioa_init+0xb0>)
 8000232:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000236:	629a      	str	r2, [r3, #40]	; 0x28

	TIM3->ARR = PERIOD;
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <gpioa_init+0xb0>)
 800023a:	2264      	movs	r2, #100	; 0x64
 800023c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR4 = DUTY;
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <gpioa_init+0xb0>)
 8000240:	2219      	movs	r2, #25
 8000242:	641a      	str	r2, [r3, #64]	; 0x40

	 // Preload bit 11 and 7
	TIM3->CCMR2 |= TIM_CCMR2_OC3PE;
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <gpioa_init+0xb0>)
 8000246:	69db      	ldr	r3, [r3, #28]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <gpioa_init+0xb0>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	61d3      	str	r3, [r2, #28]

	TIM3->CR1 |= TIM_CR1_ARPE;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <gpioa_init+0xb0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a0c      	ldr	r2, [pc, #48]	; (8000288 <gpioa_init+0xb0>)
 8000256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800025a:	6013      	str	r3, [r2, #0]


	TIM3->CCER |= TIM_CCER_CC3E;
 800025c:	4b0a      	ldr	r3, [pc, #40]	; (8000288 <gpioa_init+0xb0>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a09      	ldr	r2, [pc, #36]	; (8000288 <gpioa_init+0xb0>)
 8000262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000266:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000268:	4b07      	ldr	r3, [pc, #28]	; (8000288 <gpioa_init+0xb0>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a06      	ldr	r2, [pc, #24]	; (8000288 <gpioa_init+0xb0>)
 800026e:	f043 0301 	orr.w	r3, r3, #1
 8000272:	6013      	str	r3, [r2, #0]



}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	40023800 	.word	0x40023800
 8000284:	40020c00 	.word	0x40020c00
 8000288:	40000400 	.word	0x40000400

0800028c <main>:
#include "stm32f4xx.h"

#define PIN9		(1U<<9)
#define BUZZER		PIN9
int main(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	gpioa_init();
 8000290:	f7ff ffa2 	bl	80001d8 <gpioa_init>
	while(1);
 8000294:	e7fe      	b.n	8000294 <main+0x8>
	...

08000298 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000298:	480d      	ldr	r0, [pc, #52]	; (80002d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800029c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490d      	ldr	r1, [pc, #52]	; (80002d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0d      	ldr	r2, [pc, #52]	; (80002dc <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0a      	ldr	r2, [pc, #40]	; (80002e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002c6:	f000 f811 	bl	80002ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ca:	f7ff ffdf 	bl	800028c <main>

080002ce <LoopForever>:

LoopForever:
  b LoopForever
 80002ce:	e7fe      	b.n	80002ce <LoopForever>
  ldr   r0, =_estack
 80002d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002dc:	08000354 	.word	0x08000354
  ldr r2, =_sbss
 80002e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002e4:	2000001c 	.word	0x2000001c

080002e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e8:	e7fe      	b.n	80002e8 <ADC_IRQHandler>
	...

080002ec <__libc_init_array>:
 80002ec:	b570      	push	{r4, r5, r6, lr}
 80002ee:	4d0d      	ldr	r5, [pc, #52]	; (8000324 <__libc_init_array+0x38>)
 80002f0:	4c0d      	ldr	r4, [pc, #52]	; (8000328 <__libc_init_array+0x3c>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	2600      	movs	r6, #0
 80002f8:	42a6      	cmp	r6, r4
 80002fa:	d109      	bne.n	8000310 <__libc_init_array+0x24>
 80002fc:	4d0b      	ldr	r5, [pc, #44]	; (800032c <__libc_init_array+0x40>)
 80002fe:	4c0c      	ldr	r4, [pc, #48]	; (8000330 <__libc_init_array+0x44>)
 8000300:	f000 f818 	bl	8000334 <_init>
 8000304:	1b64      	subs	r4, r4, r5
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	2600      	movs	r6, #0
 800030a:	42a6      	cmp	r6, r4
 800030c:	d105      	bne.n	800031a <__libc_init_array+0x2e>
 800030e:	bd70      	pop	{r4, r5, r6, pc}
 8000310:	f855 3b04 	ldr.w	r3, [r5], #4
 8000314:	4798      	blx	r3
 8000316:	3601      	adds	r6, #1
 8000318:	e7ee      	b.n	80002f8 <__libc_init_array+0xc>
 800031a:	f855 3b04 	ldr.w	r3, [r5], #4
 800031e:	4798      	blx	r3
 8000320:	3601      	adds	r6, #1
 8000322:	e7f2      	b.n	800030a <__libc_init_array+0x1e>
 8000324:	0800034c 	.word	0x0800034c
 8000328:	0800034c 	.word	0x0800034c
 800032c:	0800034c 	.word	0x0800034c
 8000330:	08000350 	.word	0x08000350

08000334 <_init>:
 8000334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000336:	bf00      	nop
 8000338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033a:	bc08      	pop	{r3}
 800033c:	469e      	mov	lr, r3
 800033e:	4770      	bx	lr

08000340 <_fini>:
 8000340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000342:	bf00      	nop
 8000344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000346:	bc08      	pop	{r3}
 8000348:	469e      	mov	lr, r3
 800034a:	4770      	bx	lr
