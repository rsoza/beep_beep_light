
beep_beep_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000320  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004b8  080004c0  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004b8  080004b8  000104c0  2**0
                  CONTENTS
  4 .ARM          00000000  080004b8  080004b8  000104c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004b8  080004c0  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004b8  080004b8  000104b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004bc  080004bc  000104bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  20000000  080004c0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000005c  080004c0  0002005c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000104c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000104f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000797  00000000  00000000  00010533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000024e  00000000  00000000  00010cca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00010f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ea55  00000000  00000000  00010fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f56  00000000  00000000  0001fa31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053017  00000000  00000000  00020987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000d8  00000000  00000000  000739a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00073a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080004a0 	.word	0x080004a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080004a0 	.word	0x080004a0

080001d8 <gpio_init>:
5. Enable the counter by setting the CEN bit in the TIMx_CR1 register*/



void gpio_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
		// Enable clock access to GPIOA
		RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <gpio_init+0x40>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <gpio_init+0x40>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

		// Set PA5 as output pin TIM2_CH1
		GPIOA->MODER |= (1U<<11);
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <gpio_init+0x44>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <gpio_init+0x44>)
 80001ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001f2:	6013      	str	r3, [r2, #0]

		// Set alternate function
		GPIOA->AFR[0] |= (1U<<20);
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <gpio_init+0x44>)
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <gpio_init+0x44>)
 80001fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001fe:	6213      	str	r3, [r2, #32]

		// Enable clock access to TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <gpio_init+0x40>)
 8000202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <gpio_init+0x40>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	40020000 	.word	0x40020000

08000220 <tim2_init>:


void tim2_init()
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	TIM2->PSC=0; //set prescaller to 0 (no divider)
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	2200      	movs	r2, #0
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR=392-1; //set the maximum count value
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	f240 1287 	movw	r2, #391	; 0x187
 8000234:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT=0; //reset the current count
 8000236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800023a:	2200      	movs	r2, #0
 800023c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCMR1=(1<<5)|(1<<6); //configure the pins as PWM
 800023e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000242:	2260      	movs	r2, #96	; 0x60
 8000244:	619a      	str	r2, [r3, #24]
	TIM2->CCER |= TIM_CCER_CC1E;
 8000246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000260:	f043 0301 	orr.w	r3, r3, #1
 8000264:	6013      	str	r3, [r2, #0]
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026e:	4770      	bx	lr

08000270 <systick_Delay_Ms>:



void systick_Delay_Ms(int delay)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	// In Cortex-M4 User Guide
	SysTick->LOAD = 16000;
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <systick_Delay_Ms+0x50>)
 800027a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800027e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <systick_Delay_Ms+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <systick_Delay_Ms+0x50>)
 8000288:	2205      	movs	r2, #5
 800028a:	601a      	str	r2, [r3, #0]

	for (int i =0 ; i<delay; i++ ){
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e009      	b.n	80002a6 <systick_Delay_Ms+0x36>
		//wait until the countflag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 ){}
 8000292:	bf00      	nop
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <systick_Delay_Ms+0x50>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f9      	beq.n	8000294 <systick_Delay_Ms+0x24>
	for (int i =0 ; i<delay; i++ ){
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dbf1      	blt.n	8000292 <systick_Delay_Ms+0x22>
	}
	SysTick->CTRL = 0;
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <systick_Delay_Ms+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <main>:

uint16_t pwmData[16];
uint16_t durData[16];

int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0

	// for the ccr = duty cycle
	pwmData[0]= 392;
 80002ca:	4b4c      	ldr	r3, [pc, #304]	; (80003fc <main+0x138>)
 80002cc:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80002d0:	801a      	strh	r2, [r3, #0]
	pwmData[1]= 262;
 80002d2:	4b4a      	ldr	r3, [pc, #296]	; (80003fc <main+0x138>)
 80002d4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80002d8:	805a      	strh	r2, [r3, #2]
	pwmData[2]= 311;
 80002da:	4b48      	ldr	r3, [pc, #288]	; (80003fc <main+0x138>)
 80002dc:	f240 1237 	movw	r2, #311	; 0x137
 80002e0:	809a      	strh	r2, [r3, #4]
	pwmData[3]= 349;
 80002e2:	4b46      	ldr	r3, [pc, #280]	; (80003fc <main+0x138>)
 80002e4:	f240 125d 	movw	r2, #349	; 0x15d
 80002e8:	80da      	strh	r2, [r3, #6]
	pwmData[4]= 392;
 80002ea:	4b44      	ldr	r3, [pc, #272]	; (80003fc <main+0x138>)
 80002ec:	f44f 72c4 	mov.w	r2, #392	; 0x188
 80002f0:	811a      	strh	r2, [r3, #8]
	pwmData[5]= 262;
 80002f2:	4b42      	ldr	r3, [pc, #264]	; (80003fc <main+0x138>)
 80002f4:	f44f 7283 	mov.w	r2, #262	; 0x106
 80002f8:	815a      	strh	r2, [r3, #10]
	pwmData[6]= 311;
 80002fa:	4b40      	ldr	r3, [pc, #256]	; (80003fc <main+0x138>)
 80002fc:	f240 1237 	movw	r2, #311	; 0x137
 8000300:	819a      	strh	r2, [r3, #12]
	pwmData[7]= 349;
 8000302:	4b3e      	ldr	r3, [pc, #248]	; (80003fc <main+0x138>)
 8000304:	f240 125d 	movw	r2, #349	; 0x15d
 8000308:	81da      	strh	r2, [r3, #14]
	pwmData[8]= 392;
 800030a:	4b3c      	ldr	r3, [pc, #240]	; (80003fc <main+0x138>)
 800030c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000310:	821a      	strh	r2, [r3, #16]
	pwmData[9]= 262;
 8000312:	4b3a      	ldr	r3, [pc, #232]	; (80003fc <main+0x138>)
 8000314:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000318:	825a      	strh	r2, [r3, #18]
	pwmData[10]= 311;
 800031a:	4b38      	ldr	r3, [pc, #224]	; (80003fc <main+0x138>)
 800031c:	f240 1237 	movw	r2, #311	; 0x137
 8000320:	829a      	strh	r2, [r3, #20]
	pwmData[11]= 349;
 8000322:	4b36      	ldr	r3, [pc, #216]	; (80003fc <main+0x138>)
 8000324:	f240 125d 	movw	r2, #349	; 0x15d
 8000328:	82da      	strh	r2, [r3, #22]
	pwmData[12]= 392;
 800032a:	4b34      	ldr	r3, [pc, #208]	; (80003fc <main+0x138>)
 800032c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000330:	831a      	strh	r2, [r3, #24]
	pwmData[13]= 262;
 8000332:	4b32      	ldr	r3, [pc, #200]	; (80003fc <main+0x138>)
 8000334:	f44f 7283 	mov.w	r2, #262	; 0x106
 8000338:	835a      	strh	r2, [r3, #26]
	pwmData[14]= 311;
 800033a:	4b30      	ldr	r3, [pc, #192]	; (80003fc <main+0x138>)
 800033c:	f240 1237 	movw	r2, #311	; 0x137
 8000340:	839a      	strh	r2, [r3, #28]
	pwmData[15]= 349;
 8000342:	4b2e      	ldr	r3, [pc, #184]	; (80003fc <main+0x138>)
 8000344:	f240 125d 	movw	r2, #349	; 0x15d
 8000348:	83da      	strh	r2, [r3, #30]

	durData[0]= 8;
 800034a:	4b2d      	ldr	r3, [pc, #180]	; (8000400 <main+0x13c>)
 800034c:	2208      	movs	r2, #8
 800034e:	801a      	strh	r2, [r3, #0]
	durData[1]= 8;
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <main+0x13c>)
 8000352:	2208      	movs	r2, #8
 8000354:	805a      	strh	r2, [r3, #2]
	durData[2]= 16;
 8000356:	4b2a      	ldr	r3, [pc, #168]	; (8000400 <main+0x13c>)
 8000358:	2210      	movs	r2, #16
 800035a:	809a      	strh	r2, [r3, #4]
	durData[3]= 16;
 800035c:	4b28      	ldr	r3, [pc, #160]	; (8000400 <main+0x13c>)
 800035e:	2210      	movs	r2, #16
 8000360:	80da      	strh	r2, [r3, #6]
	durData[4]= 8;
 8000362:	4b27      	ldr	r3, [pc, #156]	; (8000400 <main+0x13c>)
 8000364:	2208      	movs	r2, #8
 8000366:	811a      	strh	r2, [r3, #8]
	durData[5]= 8;
 8000368:	4b25      	ldr	r3, [pc, #148]	; (8000400 <main+0x13c>)
 800036a:	2208      	movs	r2, #8
 800036c:	815a      	strh	r2, [r3, #10]
	durData[6]= 16;
 800036e:	4b24      	ldr	r3, [pc, #144]	; (8000400 <main+0x13c>)
 8000370:	2210      	movs	r2, #16
 8000372:	819a      	strh	r2, [r3, #12]
	durData[7]= 16;
 8000374:	4b22      	ldr	r3, [pc, #136]	; (8000400 <main+0x13c>)
 8000376:	2210      	movs	r2, #16
 8000378:	81da      	strh	r2, [r3, #14]
	durData[8]= 8;
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <main+0x13c>)
 800037c:	2208      	movs	r2, #8
 800037e:	821a      	strh	r2, [r3, #16]
	durData[9]= 8;
 8000380:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <main+0x13c>)
 8000382:	2208      	movs	r2, #8
 8000384:	825a      	strh	r2, [r3, #18]
	durData[10]= 16;
 8000386:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <main+0x13c>)
 8000388:	2210      	movs	r2, #16
 800038a:	829a      	strh	r2, [r3, #20]
	durData[11]= 16;
 800038c:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <main+0x13c>)
 800038e:	2210      	movs	r2, #16
 8000390:	82da      	strh	r2, [r3, #22]
	durData[12]= 8;
 8000392:	4b1b      	ldr	r3, [pc, #108]	; (8000400 <main+0x13c>)
 8000394:	2208      	movs	r2, #8
 8000396:	831a      	strh	r2, [r3, #24]
	durData[13]= 8;
 8000398:	4b19      	ldr	r3, [pc, #100]	; (8000400 <main+0x13c>)
 800039a:	2208      	movs	r2, #8
 800039c:	835a      	strh	r2, [r3, #26]
	durData[14]= 16;
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <main+0x13c>)
 80003a0:	2210      	movs	r2, #16
 80003a2:	839a      	strh	r2, [r3, #28]
	durData[15]= 16;
 80003a4:	4b16      	ldr	r3, [pc, #88]	; (8000400 <main+0x13c>)
 80003a6:	2210      	movs	r2, #16
 80003a8:	83da      	strh	r2, [r3, #30]

	gpio_init();
 80003aa:	f7ff ff15 	bl	80001d8 <gpio_init>
	tim2_init();
 80003ae:	f7ff ff37 	bl	8000220 <tim2_init>


//	while(1)
//	{
		for (int i=0;i<16;i++)
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
 80003b6:	e018      	b.n	80003ea <main+0x126>
		{
			TIM2->CCR1=i;
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	6353      	str	r3, [r2, #52]	; 0x34
			TIM2->CCR2=16-i;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f1c3 0210 	rsb	r2, r3, #16
 80003c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ca:	639a      	str	r2, [r3, #56]	; 0x38
			systick_Delay_Ms(durData[i]*10);
 80003cc:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <main+0x13c>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003d4:	461a      	mov	r2, r3
 80003d6:	4613      	mov	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4413      	add	r3, r2
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff46 	bl	8000270 <systick_Delay_Ms>
		for (int i=0;i<16;i++)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3301      	adds	r3, #1
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b0f      	cmp	r3, #15
 80003ee:	dde3      	ble.n	80003b8 <main+0xf4>
 80003f0:	2300      	movs	r3, #0
//			TIM2->CCR1=i;
//			TIM2->CCR2=RATE-i;
//			systick_Delay_Ms(10);
//		}
//	}
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	3708      	adds	r7, #8
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	2000001c 	.word	0x2000001c
 8000400:	2000003c 	.word	0x2000003c

08000404 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000404:	480d      	ldr	r0, [pc, #52]	; (800043c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000406:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000408:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	; (8000440 <LoopForever+0x6>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	; (8000444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	; (8000448 <LoopForever+0xe>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	; (800044c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	; (8000450 <LoopForever+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000432:	f000 f811 	bl	8000458 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000436:	f7ff ff45 	bl	80002c4 <main>

0800043a <LoopForever>:

LoopForever:
  b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>
  ldr   r0, =_estack
 800043c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000448:	080004c0 	.word	0x080004c0
  ldr r2, =_sbss
 800044c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000450:	2000005c 	.word	0x2000005c

08000454 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC_IRQHandler>
	...

08000458 <__libc_init_array>:
 8000458:	b570      	push	{r4, r5, r6, lr}
 800045a:	4d0d      	ldr	r5, [pc, #52]	; (8000490 <__libc_init_array+0x38>)
 800045c:	4c0d      	ldr	r4, [pc, #52]	; (8000494 <__libc_init_array+0x3c>)
 800045e:	1b64      	subs	r4, r4, r5
 8000460:	10a4      	asrs	r4, r4, #2
 8000462:	2600      	movs	r6, #0
 8000464:	42a6      	cmp	r6, r4
 8000466:	d109      	bne.n	800047c <__libc_init_array+0x24>
 8000468:	4d0b      	ldr	r5, [pc, #44]	; (8000498 <__libc_init_array+0x40>)
 800046a:	4c0c      	ldr	r4, [pc, #48]	; (800049c <__libc_init_array+0x44>)
 800046c:	f000 f818 	bl	80004a0 <_init>
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	10a4      	asrs	r4, r4, #2
 8000474:	2600      	movs	r6, #0
 8000476:	42a6      	cmp	r6, r4
 8000478:	d105      	bne.n	8000486 <__libc_init_array+0x2e>
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000480:	4798      	blx	r3
 8000482:	3601      	adds	r6, #1
 8000484:	e7ee      	b.n	8000464 <__libc_init_array+0xc>
 8000486:	f855 3b04 	ldr.w	r3, [r5], #4
 800048a:	4798      	blx	r3
 800048c:	3601      	adds	r6, #1
 800048e:	e7f2      	b.n	8000476 <__libc_init_array+0x1e>
 8000490:	080004b8 	.word	0x080004b8
 8000494:	080004b8 	.word	0x080004b8
 8000498:	080004b8 	.word	0x080004b8
 800049c:	080004bc 	.word	0x080004bc

080004a0 <_init>:
 80004a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a2:	bf00      	nop
 80004a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004a6:	bc08      	pop	{r3}
 80004a8:	469e      	mov	lr, r3
 80004aa:	4770      	bx	lr

080004ac <_fini>:
 80004ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ae:	bf00      	nop
 80004b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004b2:	bc08      	pop	{r3}
 80004b4:	469e      	mov	lr, r3
 80004b6:	4770      	bx	lr
