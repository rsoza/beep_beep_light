
beep_beep_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000550  08000550  00010558  2**0
                  CONTENTS
  4 .ARM          00000000  08000550  08000550  00010558  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000550  08000558  00010558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000550  08000550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000554  08000554  00010554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010558  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000558  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000558  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007b2  00000000  00000000  000105cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000028b  00000000  00000000  00010d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00011008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000051  00000000  00000000  00011088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ea47  00000000  00000000  000110d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000f8a  00000000  00000000  0001fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005301c  00000000  00000000  00020aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000120  00000000  00000000  00073ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00073be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000440 	.word	0x08000440

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000440 	.word	0x08000440

080001d8 <gpio_init>:
5. Enable the counter by setting the CEN bit in the TIMx_CR1 register*/



void gpio_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
		// Enable clock access to GPIOA
		RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <gpio_init+0x40>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <gpio_init+0x40>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

		// Set PA5 as output pin TIM2_CH1
		GPIOA->MODER |= (1U<<11);
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <gpio_init+0x44>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <gpio_init+0x44>)
 80001ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001f2:	6013      	str	r3, [r2, #0]

		// Set alternate function
		GPIOA->AFR[0] |= (1U<<20);
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <gpio_init+0x44>)
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <gpio_init+0x44>)
 80001fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001fe:	6213      	str	r3, [r2, #32]

		// Enable clock access to TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <gpio_init+0x40>)
 8000202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <gpio_init+0x40>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	40020000 	.word	0x40020000

08000220 <tim2_init>:


void tim2_init()
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	TIM2->PSC=0;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	2200      	movs	r2, #0
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->CNT=0;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	2200      	movs	r2, #0
 8000232:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCMR1=(1<<5)|(1<<6); //configure the pins as PWM
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	2260      	movs	r2, #96	; 0x60
 800023a:	619a      	str	r2, [r3, #24]
	TIM2->CCER |= TIM_CCER_CC1E;
 800023c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000240:	6a1b      	ldr	r3, [r3, #32]
 8000242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000246:	f043 0301 	orr.w	r3, r3, #1
 800024a:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= TIM_CR1_CEN;
 800024c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <systick_Delay_Ms>:



void systick_Delay_Ms(int delay)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
	// In Cortex-M4 User Guide
	SysTick->LOAD = 16000;
 8000270:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <systick_Delay_Ms+0x50>)
 8000272:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000276:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <systick_Delay_Ms+0x50>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <systick_Delay_Ms+0x50>)
 8000280:	2205      	movs	r2, #5
 8000282:	601a      	str	r2, [r3, #0]

	for (int i =0 ; i<delay; i++ ){
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	e009      	b.n	800029e <systick_Delay_Ms+0x36>
		//wait until the countflag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 ){}
 800028a:	bf00      	nop
 800028c:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <systick_Delay_Ms+0x50>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000294:	2b00      	cmp	r3, #0
 8000296:	d0f9      	beq.n	800028c <systick_Delay_Ms+0x24>
	for (int i =0 ; i<delay; i++ ){
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	dbf1      	blt.n	800028a <systick_Delay_Ms+0x22>
	}
	SysTick->CTRL = 0;
 80002a6:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <systick_Delay_Ms+0x50>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000e010 	.word	0xe000e010

080002bc <main>:
void song(int frequency, int duration);

int wholenote = (60000 * 4) / 85;

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b0c0      	sub	sp, #256	; 0x100
 80002c0:	af00      	add	r7, sp, #0

	// for the ccr = duty cycle
	int melody[] = {
 80002c2:	4a17      	ldr	r2, [pc, #92]	; (8000320 <main+0x64>)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4611      	mov	r1, r2
 80002c8:	22f8      	movs	r2, #248	; 0xf8
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8aa 	bl	8000424 <memcpy>

	};



	gpio_init();
 80002d0:	f7ff ff82 	bl	80001d8 <gpio_init>
	tim2_init();
 80002d4:	f7ff ffa4 	bl	8000220 <tim2_init>


	while(1){
	for (int i = 0; i < (sizeof(melody) / sizeof(melody[0])) -1; i+=2) {
 80002d8:	2300      	movs	r3, #0
 80002da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80002de:	e019      	b.n	8000314 <main+0x58>
	        song(melody[i], melody[i+1]);
 80002e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80002e4:	009b      	lsls	r3, r3, #2
 80002e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80002ea:	443b      	add	r3, r7
 80002ec:	f853 2cfc 	ldr.w	r2, [r3, #-252]
 80002f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80002f4:	3301      	adds	r3, #1
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80002fc:	443b      	add	r3, r7
 80002fe:	f853 3cfc 	ldr.w	r3, [r3, #-252]
 8000302:	4619      	mov	r1, r3
 8000304:	4610      	mov	r0, r2
 8000306:	f000 f80d 	bl	8000324 <song>
	for (int i = 0; i < (sizeof(melody) / sizeof(melody[0])) -1; i+=2) {
 800030a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800030e:	3302      	adds	r3, #2
 8000310:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000318:	2b3c      	cmp	r3, #60	; 0x3c
 800031a:	d9e1      	bls.n	80002e0 <main+0x24>
 800031c:	e7dc      	b.n	80002d8 <main+0x1c>
 800031e:	bf00      	nop
 8000320:	08000458 	.word	0x08000458

08000324 <song>:

	}
}


void song(int frequency, int duration) {
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]

	duration = duration > 0 ? duration : abs(duration);
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	dc04      	bgt.n	800033e <song+0x1a>
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	2b00      	cmp	r3, #0
 8000338:	bfb8      	it	lt
 800033a:	425b      	neglt	r3, r3
 800033c:	e000      	b.n	8000340 <song+0x1c>
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	603b      	str	r3, [r7, #0]
    TIM2->ARR = 450000 / frequency; // Set PWM period for the desired frequency
 8000342:	4a10      	ldr	r2, [pc, #64]	; (8000384 <song+0x60>)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	fb92 f2f3 	sdiv	r2, r2, r3
 800034a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800034e:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM2->CCR1 = TIM2->ARR /2 ; // duty cycle percentage
 8000350:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800035a:	085b      	lsrs	r3, r3, #1
 800035c:	6353      	str	r3, [r2, #52]	; 0x34
    systick_Delay_Ms(duration * 60);
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	4613      	mov	r3, r2
 8000362:	011b      	lsls	r3, r3, #4
 8000364:	1a9b      	subs	r3, r3, r2
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	4618      	mov	r0, r3
 800036a:	f7ff ff7d 	bl	8000268 <systick_Delay_Ms>
    TIM2->CCR1 = 0; // off -PWM
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	2200      	movs	r2, #0
 8000374:	635a      	str	r2, [r3, #52]	; 0x34
    systick_Delay_Ms(10);
 8000376:	200a      	movs	r0, #10
 8000378:	f7ff ff76 	bl	8000268 <systick_Delay_Ms>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	0006ddd0 	.word	0x0006ddd0

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff7f 	bl	80002bc <main>

080003be <LoopForever>:

LoopForever:
  b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000558 	.word	0x08000558
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4d0d      	ldr	r5, [pc, #52]	; (8000414 <__libc_init_array+0x38>)
 80003e0:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e2:	1b64      	subs	r4, r4, r5
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	2600      	movs	r6, #0
 80003e8:	42a6      	cmp	r6, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	4d0b      	ldr	r5, [pc, #44]	; (800041c <__libc_init_array+0x40>)
 80003ee:	4c0c      	ldr	r4, [pc, #48]	; (8000420 <__libc_init_array+0x44>)
 80003f0:	f000 f826 	bl	8000440 <_init>
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	2600      	movs	r6, #0
 80003fa:	42a6      	cmp	r6, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f855 3b04 	ldr.w	r3, [r5], #4
 8000404:	4798      	blx	r3
 8000406:	3601      	adds	r6, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f855 3b04 	ldr.w	r3, [r5], #4
 800040e:	4798      	blx	r3
 8000410:	3601      	adds	r6, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	08000550 	.word	0x08000550
 8000418:	08000550 	.word	0x08000550
 800041c:	08000550 	.word	0x08000550
 8000420:	08000554 	.word	0x08000554

08000424 <memcpy>:
 8000424:	440a      	add	r2, r1
 8000426:	4291      	cmp	r1, r2
 8000428:	f100 33ff 	add.w	r3, r0, #4294967295
 800042c:	d100      	bne.n	8000430 <memcpy+0xc>
 800042e:	4770      	bx	lr
 8000430:	b510      	push	{r4, lr}
 8000432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800043a:	4291      	cmp	r1, r2
 800043c:	d1f9      	bne.n	8000432 <memcpy+0xe>
 800043e:	bd10      	pop	{r4, pc}

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
