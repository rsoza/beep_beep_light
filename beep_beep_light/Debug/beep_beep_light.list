
beep_beep_light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800042c  0800042c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800042c  0800042c  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  0800042c  0800042c  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800042c  0800042c  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800042c  0800042c  0001042c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000454  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000454  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006bf  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001ef  00000000  00000000  00020752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000088  00000000  00000000  00020948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000057  00000000  00000000  000209d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000df39  00000000  00000000  00020a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c59  00000000  00000000  0002e960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fbf1  00000000  00000000  0002f5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000118  00000000  00000000  0007f1ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0007f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000414 	.word	0x08000414

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08000414 	.word	0x08000414

080001d8 <gpio_init>:
5. Enable the counter by setting the CEN bit in the TIMx_CR1 register*/



void gpio_init(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
		// Enable clock access to GPIOA
		RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <gpio_init+0x40>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a0d      	ldr	r2, [pc, #52]	; (8000218 <gpio_init+0x40>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

		// Set PA5 as output pin TIM2_CH1
		GPIOA->MODER |= (1U<<11);
 80001e8:	4b0c      	ldr	r3, [pc, #48]	; (800021c <gpio_init+0x44>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a0b      	ldr	r2, [pc, #44]	; (800021c <gpio_init+0x44>)
 80001ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001f2:	6013      	str	r3, [r2, #0]

		// Set alternate function
		GPIOA->AFR[0] |= (1U<<20);
 80001f4:	4b09      	ldr	r3, [pc, #36]	; (800021c <gpio_init+0x44>)
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	4a08      	ldr	r2, [pc, #32]	; (800021c <gpio_init+0x44>)
 80001fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001fe:	6213      	str	r3, [r2, #32]

		// Enable clock access to TIM2
		RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <gpio_init+0x40>)
 8000202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000204:	4a04      	ldr	r2, [pc, #16]	; (8000218 <gpio_init+0x40>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	40020000 	.word	0x40020000

08000220 <tim2_init>:


void tim2_init()
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	TIM2->PSC=0; //set prescaller to 0 (no divider)
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	2200      	movs	r2, #0
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR=RATE; //set the maximum count value
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	2264      	movs	r2, #100	; 0x64
 8000232:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT=0; //reset the current count
 8000234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000238:	2200      	movs	r2, #0
 800023a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CCMR1=(1<<5)|(1<<6); //configure the pins as PWM
 800023c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000240:	2260      	movs	r2, #96	; 0x60
 8000242:	619a      	str	r2, [r3, #24]
	TIM2->CCER |= TIM_CCER_CC1E;
 8000244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000248:	6a1b      	ldr	r3, [r3, #32]
 800024a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	6213      	str	r3, [r2, #32]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800025e:	f043 0301 	orr.w	r3, r3, #1
 8000262:	6013      	str	r3, [r2, #0]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
	...

08000270 <systick_Delay_Ms>:



void systick_Delay_Ms(int delay)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	// In Cortex-M4 User Guide
	SysTick->LOAD = 16000;
 8000278:	4b11      	ldr	r3, [pc, #68]	; (80002c0 <systick_Delay_Ms+0x50>)
 800027a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800027e:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <systick_Delay_Ms+0x50>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 8000286:	4b0e      	ldr	r3, [pc, #56]	; (80002c0 <systick_Delay_Ms+0x50>)
 8000288:	2205      	movs	r2, #5
 800028a:	601a      	str	r2, [r3, #0]

	for (int i =0 ; i<delay; i++ ){
 800028c:	2300      	movs	r3, #0
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e009      	b.n	80002a6 <systick_Delay_Ms+0x36>
		//wait until the countflag is set
		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0 ){}
 8000292:	bf00      	nop
 8000294:	4b0a      	ldr	r3, [pc, #40]	; (80002c0 <systick_Delay_Ms+0x50>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f9      	beq.n	8000294 <systick_Delay_Ms+0x24>
	for (int i =0 ; i<delay; i++ ){
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	dbf1      	blt.n	8000292 <systick_Delay_Ms+0x22>
	}
	SysTick->CTRL = 0;
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <systick_Delay_Ms+0x50>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
}
 80002b4:	bf00      	nop
 80002b6:	3714      	adds	r7, #20
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr
 80002c0:	e000e010 	.word	0xe000e010

080002c4 <play_note>:

uint16_t melody[] = { NOTE_G4,8, NOTE_C4,8, NOTE_DS4,16, NOTE_F4,16, NOTE_G4,8, NOTE_C4,8, NOTE_DS4,16, NOTE_F4,16 };


void play_note(uint16_t note_frequency, uint32_t duration, int i) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b086      	sub	sp, #24
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	81fb      	strh	r3, [r7, #14]
    // Calculate ARR value for the desired note frequency
    uint16_t arr_value = 45000000 / note_frequency;
 80002d2:	89fb      	ldrh	r3, [r7, #14]
 80002d4:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <play_note+0x4c>)
 80002d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80002da:	82fb      	strh	r3, [r7, #22]

    // Set ARR value
    TIM2->ARR = arr_value;
 80002dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e0:	8afb      	ldrh	r3, [r7, #22]
 80002e2:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Generate tone for the specified duration
    // Insert code to generate the tone here
    TIM2->CCR1=arr_value;
 80002e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002e8:	8afb      	ldrh	r3, [r7, #22]
 80002ea:	6353      	str	r3, [r2, #52]	; 0x34
    TIM2->CCR2=arr_value-i;
 80002ec:	8afa      	ldrh	r2, [r7, #22]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	1ad2      	subs	r2, r2, r3
 80002f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f6:	639a      	str	r2, [r3, #56]	; 0x38

    // Delay for the specified duration
    systick_Delay_Ms(duration*100);
 80002f8:	68bb      	ldr	r3, [r7, #8]
 80002fa:	2264      	movs	r2, #100	; 0x64
 80002fc:	fb02 f303 	mul.w	r3, r2, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ffb5 	bl	8000270 <systick_Delay_Ms>
}
 8000306:	bf00      	nop
 8000308:	3718      	adds	r7, #24
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	02aea540 	.word	0x02aea540

08000314 <set_note>:

void set_note(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b084      	sub	sp, #16
 8000318:	af00      	add	r7, sp, #0
	int melody_length = sizeof(melody) / sizeof(melody[0]);
 800031a:	2310      	movs	r3, #16
 800031c:	60bb      	str	r3, [r7, #8]

	for (int i = 0; i < melody_length; i+=2)
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
 8000322:	e013      	b.n	800034c <set_note+0x38>
	{
		uint16_t note_freq = melody[i];
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <set_note+0x4c>)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800032c:	80fb      	strh	r3, [r7, #6]
		uint32_t duration = melody[i+1];
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	3301      	adds	r3, #1
 8000332:	4a0b      	ldr	r2, [pc, #44]	; (8000360 <set_note+0x4c>)
 8000334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000338:	603b      	str	r3, [r7, #0]
		play_note(note_freq, duration, i);
 800033a:	88fb      	ldrh	r3, [r7, #6]
 800033c:	68fa      	ldr	r2, [r7, #12]
 800033e:	6839      	ldr	r1, [r7, #0]
 8000340:	4618      	mov	r0, r3
 8000342:	f7ff ffbf 	bl	80002c4 <play_note>
	for (int i = 0; i < melody_length; i+=2)
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3302      	adds	r3, #2
 800034a:	60fb      	str	r3, [r7, #12]
 800034c:	68fa      	ldr	r2, [r7, #12]
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	429a      	cmp	r2, r3
 8000352:	dbe7      	blt.n	8000324 <set_note+0x10>
	}

}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000000 	.word	0x20000000

08000364 <main>:
#include "buzzer.h"



int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

	gpio_init();
 8000368:	f7ff ff36 	bl	80001d8 <gpio_init>
	tim2_init();
 800036c:	f7ff ff58 	bl	8000220 <tim2_init>


	while(1)
	{
	set_note();
 8000370:	f7ff ffd0 	bl	8000314 <set_note>
 8000374:	e7fc      	b.n	8000370 <main+0xc>
	...

08000378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000378:	480d      	ldr	r0, [pc, #52]	; (80003b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800037a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800037c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000384:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <LoopForever+0xe>)
  movs r3, #0
 8000386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000388:	e002      	b.n	8000390 <LoopCopyDataInit>

0800038a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800038e:	3304      	adds	r3, #4

08000390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000394:	d3f9      	bcc.n	800038a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000396:	4a0a      	ldr	r2, [pc, #40]	; (80003c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <LoopForever+0x16>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800039c:	e001      	b.n	80003a2 <LoopFillZerobss>

0800039e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800039e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a0:	3204      	adds	r2, #4

080003a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a4:	d3fb      	bcc.n	800039e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003a6:	f000 f811 	bl	80003cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003aa:	f7ff ffdb 	bl	8000364 <main>

080003ae <LoopForever>:

LoopForever:
  b LoopForever
 80003ae:	e7fe      	b.n	80003ae <LoopForever>
  ldr   r0, =_estack
 80003b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80003bc:	08000434 	.word	0x08000434
  ldr r2, =_sbss
 80003c0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80003c4:	2000003c 	.word	0x2000003c

080003c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c8:	e7fe      	b.n	80003c8 <ADC_IRQHandler>
	...

080003cc <__libc_init_array>:
 80003cc:	b570      	push	{r4, r5, r6, lr}
 80003ce:	4d0d      	ldr	r5, [pc, #52]	; (8000404 <__libc_init_array+0x38>)
 80003d0:	4c0d      	ldr	r4, [pc, #52]	; (8000408 <__libc_init_array+0x3c>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	2600      	movs	r6, #0
 80003d8:	42a6      	cmp	r6, r4
 80003da:	d109      	bne.n	80003f0 <__libc_init_array+0x24>
 80003dc:	4d0b      	ldr	r5, [pc, #44]	; (800040c <__libc_init_array+0x40>)
 80003de:	4c0c      	ldr	r4, [pc, #48]	; (8000410 <__libc_init_array+0x44>)
 80003e0:	f000 f818 	bl	8000414 <_init>
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	10a4      	asrs	r4, r4, #2
 80003e8:	2600      	movs	r6, #0
 80003ea:	42a6      	cmp	r6, r4
 80003ec:	d105      	bne.n	80003fa <__libc_init_array+0x2e>
 80003ee:	bd70      	pop	{r4, r5, r6, pc}
 80003f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003f4:	4798      	blx	r3
 80003f6:	3601      	adds	r6, #1
 80003f8:	e7ee      	b.n	80003d8 <__libc_init_array+0xc>
 80003fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80003fe:	4798      	blx	r3
 8000400:	3601      	adds	r6, #1
 8000402:	e7f2      	b.n	80003ea <__libc_init_array+0x1e>
 8000404:	0800042c 	.word	0x0800042c
 8000408:	0800042c 	.word	0x0800042c
 800040c:	0800042c 	.word	0x0800042c
 8000410:	08000430 	.word	0x08000430

08000414 <_init>:
 8000414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000416:	bf00      	nop
 8000418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041a:	bc08      	pop	{r3}
 800041c:	469e      	mov	lr, r3
 800041e:	4770      	bx	lr

08000420 <_fini>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr
